# -*- coding: utf-8 -*-
"""PopIn DataAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FS2tyZvszJl9EmnDsLQA07ooHzM3muWV
"""
import streamlit as st
import numpy as np # linear algebra
import pandas as pd # data manipulation and analysis
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # data visualization
sns.set_style('whitegrid') # set style for visualization
import warnings # ignore warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('MeetUp_PopIn_Events.csv')

df.head()

df.columns

plt.figure(figsize=(10,6))
sns.distplot(df.Attendees,color='r')
plt.title('Attendees by Category',size=18)
plt.xlabel('Category',size=14)
plt.ylabel('Attendees',size=14)
plt.show()

plt.figure(figsize=(10,6))
sns.countplot(x='Category', data=df)  # Changed 'Attendees' to 'Category'
plt.title('Attendees by Event Category', size=18)
plt.xlabel('Category', size=14)
plt.show()


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ... (rest of your code)

# Convert 'Date & Time' to datetime objects with utc=True
df['Date & Time'] = pd.to_datetime(df['Date & Time'], utc=True)  # Change here

# Extract month and year
df['Month'] = df['Date & Time'].dt.month
df['Year'] = df['Date & Time'].dt.year


# Group data by month, year, and category, summing attendees
grouped_data = df.groupby(['Year', 'Month', 'Category'])['Attendees'].sum().reset_index()

# Create the plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Month', y='Attendees', hue='Category', style='Year', data=grouped_data, markers=True)
plt.title('Events by Month and Year with Type and Total Attendees', size=16)
plt.xlabel('Month', size=12)
plt.ylabel('Total Attendees', size=12)
plt.xticks(range(1, 13))  # Set x-axis ticks to represent months
plt.legend(title='Event Category')
plt.grid(True)
plt.show()

#!pip install matplotlib seaborn pandas

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ... (rest of your code)

# Convert 'Date & Time' to datetime objects with utc=True
df['Date & Time'] = pd.to_datetime(df['Date & Time'], utc=True)

# Extract month and year
df['Month'] = df['Date & Time'].dt.month
df['Year'] = df['Date & Time'].dt.year

# Create a new column for year-month combination as string
df['Year-Month'] = df['Year'].astype(str) + '-' + df['Month'].astype(str).str.zfill(2)

# Group data by year-month and category, summing attendees and counting events
grouped_data = df.groupby(['Year-Month', 'Category'])[['Attendees']].agg(['sum', 'count']).reset_index()
grouped_data.columns = ['Year-Month', 'Category', 'Total Attendees', 'Number of Events']

# Create the plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='Year-Month', y='Number of Events', hue='Category', data=grouped_data, markers=True)  # Line for number of events
plt.title('Events and Attendees by Month and Year', size=16)
plt.xlabel('Year-Month', size=12)
plt.ylabel('Number of Events', size=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.legend(title='Event Category')
plt.grid(True)

# Add a secondary y-axis for attendees
ax2 = plt.twinx()  # Create a secondary y-axis
sns.lineplot(x='Year-Month', y='Total Attendees', hue='Category', data=grouped_data, markers=True, ax=ax2, linestyle='--')  # Line for total attendees
ax2.set_ylabel('Total Attendees', size=12)
ax2.legend(title='Event Category', loc='upper right')

plt.tight_layout()  # Adjust layout to prevent overlapping labels
plt.show()

#!pip install matplotlib seaborn pandas

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV file (replace with the correct path/URL)
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Assuming you have a column named 'Location'
# indicating whether the event was online or in person

# Create a new column 'Event Type' based on 'Location'
# If 'Location' contains 'Online', set 'Event Type' to 'Online'
# Otherwise, set 'Event Type' to 'In Person'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Count the occurrences of each event type
event_type_counts = df['Event Type'].value_counts()

# Create the bar plot
plt.figure(figsize=(8, 6))
sns.barplot(x=event_type_counts.index, y=event_type_counts.values, palette=['skyblue', 'lightcoral'])
plt.title('Count of Online vs. In Person Events', size=16)
plt.xlabel('Event Type', size=12)
plt.ylabel('Count', size=12)
plt.show()

#!pip install matplotlib seaborn pandas

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV file (replace with the correct path/URL)
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Assuming you have columns named 'Hosted by' and 'Location'
# Replace 'your_host_column_name' with the actual column name from your CSV
host_column_name = 'Hosted By'

# Create a new column 'Event Type' based on 'Location'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Group data by host and 'Event Type', counting events
grouped_data = df.groupby([host_column_name, 'Event Type'])['Event Type'].count().reset_index(name='Count')

# Create the bar plot
plt.figure(figsize=(12, 6))
sns.barplot(x=host_column_name, y='Count', hue='Event Type', data=grouped_data, palette=['skyblue', 'lightcoral'])
plt.title('Number of Events Hosted by Each Host (Online vs. In Person)', size=16)
plt.xlabel(host_column_name, size=12)
plt.ylabel('Number of Events', size=12)
plt.xticks(rotation=45, ha='right')
plt.legend(title='Event Type')
plt.tight_layout()
plt.show()

import string
string.punctuation

#!pip install emoji
import pandas as pd
import string
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from bs4 import BeautifulSoup
import emoji

# Ensure NLTK resources are available
nltk.download('stopwords')
nltk.download('wordnet')

# Load the dataset
file_path = 'MeetUp_PopIn_Events.csv'
df = pd.read_csv(file_path)

# Function to remove URLs
def remove_urls(text):
    return re.sub(r'http\S+|www.\S+', '', text)

# Function to remove HTML tags
def remove_html(text):
    return BeautifulSoup(text, "html.parser").get_text()

# Function to remove emojis
def remove_emojis(text):
    return emoji.replace_emoji(text, replace='')

# Function to remove punctuation
def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

# Tokenization
def tokenize(text):
    return re.split(r'\W+', text.lower())

# Load stopwords in English
stop_words = set(stopwords.words('english'))

# Function to remove stopwords
def remove_stopwords(words):
    return [word for word in words if word not in stop_words]

# Lemmatization
lemmatizer = WordNetLemmatizer()
def lemmatize(words):
    return [lemmatizer.lemmatize(word) for word in words]

# Apply cleaning to 'Event Name' and 'Location'
df['event_name_clean'] = df['Event Name'].astype(str).apply(lambda x: remove_urls(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: remove_html(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: remove_emojis(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: remove_punctuation(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: tokenize(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: remove_stopwords(x))
df['event_name_clean'] = df['event_name_clean'].apply(lambda x: lemmatize(x))

df['location_clean'] = df['Location'].astype(str).apply(lambda x: remove_urls(x))
df['location_clean'] = df['location_clean'].apply(lambda x: remove_html(x))
df['location_clean'] = df['location_clean'].apply(lambda x: remove_emojis(x))
df['location_clean'] = df['location_clean'].apply(lambda x: remove_punctuation(x))
df['location_clean'] = df['location_clean'].apply(lambda x: tokenize(x))
df['location_clean'] = df['location_clean'].apply(lambda x: remove_stopwords(x))
df['location_clean'] = df['location_clean'].apply(lambda x: lemmatize(x))

# Check results
df[['Event Name', 'event_name_clean', 'Location', 'location_clean']].head()

from matplotlib import pyplot as plt
import seaborn as sns
_df_0.groupby('Event Name').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

#!pip install folium
import folium
import pandas as pd

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Create a map centered on Toronto
toronto_map = folium.Map(location=[43.6532, -79.3832], zoom_start=12)  # Toronto coordinates

# Iterate through the DataFrame and add markers for each location
for index, row in df.iterrows():
    location = row['Location']
    # Attempt to extract latitude and longitude using regular expressions
    try:
        lat_lon = re.search(r'(-?\d+\.\d+),\s*(-?\d+\.\d+)', location).groups()
        latitude = float(lat_lon[0])
        longitude = float(lat_lon[1])

        # Create a marker and add it to the map
        folium.Marker(
            location=[latitude, longitude],
            popup=row['Event Name'],  # Use Event Name for popup
            tooltip=row['Hosted By']   # Use Hosted By for tooltip
        ).add_to(toronto_map)
    except AttributeError:
        # Handle cases where location data is not in the expected format
        print(f"Skipping location: {location} - Could not extract coordinates.")

# Save the map to an HTML file
toronto_map.save('toronto_events_map.html')

# Display the map in the notebook
toronto_map

#!pip install folium geopy
import folium
import pandas as pd
import re
from geopy.geocoders import Nominatim

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# 1. Clean up location data
def clean_location(location):
    # Remove special characters and extra spaces
    location = re.sub(r"[^\w\s,]", "", location)
    location = re.sub(r"\s+", " ", location).strip()
    return location

df['Cleaned Location'] = df['Location'].apply(clean_location)

# 2. Geocode addresses to get latitude and longitude
geolocator = Nominatim(user_agent="toronto_events_map")

def get_coordinates(location):
    try:
        # Attempt to geocode the location (replace 'Toronto, ON' with a more specific area if needed)
        location_data = geolocator.geocode(f"{location}, Toronto, ON")
        if location_data:
            return location_data.latitude, location_data.longitude
        else:
            return None, None  # Handle cases where geocoding fails
    except Exception as e:
        print(f"Error geocoding {location}: {e}")
        return None, None

df[['Latitude', 'Longitude']] = df['Cleaned Location'].apply(lambda x: pd.Series(get_coordinates(x)))

# 3. Handle online events
online_lat, online_lon = 43.60, -79.45  # A location in the water area near Toronto

df.loc[df['Cleaned Location'].str.contains('online', case=False), ['Latitude', 'Longitude']] = online_lat, online_lon

# 4. Group by location and sum attendees
grouped_df = df.groupby(['Latitude', 'Longitude'])['Attendees'].agg(['sum', 'count']).reset_index()

# 5. Create the map
toronto_map = folium.Map(location=[43.6532, -79.3832], zoom_start=12)

# 6. Add markers and circles
for index, row in grouped_df.iterrows():
    latitude, longitude = row['Latitude'], row['Longitude']
    total_attendees = row['sum']
    num_events = row['count']

    # Create marker with popup information
    popup_text = f"Total Attendees: {total_attendees}<br>Number of Events: {num_events}"
    folium.Marker(
        location=[latitude, longitude],
        popup=popup_text,
        tooltip=f"Location: {df.loc[(df['Latitude'] == latitude) & (df['Longitude'] == longitude), 'Cleaned Location'].iloc[0]}"
    ).add_to(toronto_map)

    # Add circle with radius based on attendees
    radius = total_attendees / 10  # Adjust this scaling factor as needed
    folium.Circle(
        location=[latitude, longitude],
        radius=radius,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.3,
        popup=popup_text
    ).add_to(toronto_map)

# Save and display the map
toronto_map.save('toronto_events_map_cleaned.html')
toronto_map

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Create a new column 'Event Type' based on 'Location'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics for online events
online_events = df[df['Event Type'] == 'Online']
total_online_events = len(online_events)
total_online_attendees = online_events['Attendees'].sum()
avg_online_attendees = total_online_attendees / total_online_events if total_online_events else 0

# Calculate metrics for in-person events
in_person_events = df[df['Event Type'] == 'In Person']
total_in_person_events = len(in_person_events)
total_in_person_attendees = in_person_events['Attendees'].sum()
avg_in_person_attendees = total_in_person_attendees / total_in_person_events if total_in_person_events else 0

# Create the first visual (online events)
plt.figure(figsize=(8, 6))
sns.barplot(x=['Total Events', 'Total Attendees', 'Avg. Attendees'],
            y=[total_online_events, total_online_attendees, avg_online_attendees],
            palette='Blues')
plt.title('Online Events Metrics', size=16)
plt.ylabel('Count / Average', size=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Create the second visual (in-person events)
plt.figure(figsize=(8, 6))
sns.barplot(x=['Total Events', 'Total Attendees', 'Avg. Attendees'],
            y=[total_in_person_events, total_in_person_attendees, avg_in_person_attendees],
            palette='Greens')
plt.title('In-Person Events Metrics', size=16)
plt.ylabel('Count / Average', size=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import pandas as pd

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Create a new column 'Event Type' based on 'Location'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics for online events
online_events = df[df['Event Type'] == 'Online']
total_online_events = len(online_events)
total_online_attendees = online_events['Attendees'].sum()
avg_online_attendees = total_online_attendees / total_online_events if total_online_events else 0

# Calculate metrics for in-person events
in_person_events = df[df['Event Type'] == 'In Person']
total_in_person_events = len(in_person_events)
total_in_person_attendees = in_person_events['Attendees'].sum()
avg_in_person_attendees = total_in_person_attendees / total_in_person_events if total_in_person_events else 0

# Create a DataFrame for the results
data = {
    'Event Type': ['Online', 'In Person'],
    'Total Events': [total_online_events, total_in_person_events],
    'Total Attendees': [total_online_attendees, total_in_person_attendees],
    'Avg. Attendees per Event': [avg_online_attendees, avg_in_person_attendees]
}

results_df = pd.DataFrame(data)

# Display the results
print(results_df.to_string())  # Print as a formatted table

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset and prepare data (same as before)
df = pd.read_csv('MeetUp_PopIn_Events.csv')
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics (same as before)
# ... (Code to calculate total_online_events, total_online_attendees, etc.)

# Create Pie Chart for Event Totals
plt.figure(figsize=(6, 6))
plt.pie([total_online_events, total_in_person_events],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Event Totals by Type', size=14)
plt.show()

# Create Pie Chart for Total Attendees
plt.figure(figsize=(6, 6))
plt.pie([total_online_attendees, total_in_person_attendees],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Total Attendees by Event Type', size=14)
plt.show()

# Create Pie Chart for Average Attendees per Event
plt.figure(figsize=(6, 6))
plt.pie([avg_online_attendees, avg_in_person_attendees],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Average Attendees per Event Type', size=14)
plt.show()

# -*- coding: utf-8 -*-
"""PopIn DataAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FS2tyZvszJl9EmnDsLQA07ooHzM3muWV
"""
import numpy as np # linear algebra
import pandas as pd # data manipulation and analysis
#import matplotlib.pyplot as plt # data visualization
#import seaborn as sns # data visualization
sns.set_style('whitegrid') # set style for visualization
import warnings # ignore warnings
warnings.filterwarnings('ignore')
df = pd.read_csv('MeetUp_PopIn_Events.csv')

plt.figure(figsize=(10,6))
sns.countplot(x='Category', data=df)  # Changed 'Attendees' to 'Category'
plt.title('Attendees by Event Category', size=18)
plt.xlabel('Category', size=14)
plt.show()



#!pip install matplotlib seaborn pandas

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV file (replace with the correct path/URL)
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Assuming you have a column named 'Location'
# indicating whether the event was online or in person

# Create a new column 'Event Type' based on 'Location'
# If 'Location' contains 'Online', set 'Event Type' to 'Online'
# Otherwise, set 'Event Type' to 'In Person'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Count the occurrences of each event type
event_type_counts = df['Event Type'].value_counts()

# Create the bar plot
plt.figure(figsize=(8, 6))
sns.barplot(x=event_type_counts.index, y=event_type_counts.values, palette=['skyblue', 'lightcoral'])
plt.title('Count of Online vs. In Person Events', size=16)
plt.xlabel('Event Type', size=12)
plt.ylabel('Count', size=12)
plt.show()

####

from matplotlib import pyplot as plt
import seaborn as sns
_df_0.groupby('Event Name').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

##########################################

#!pip install folium geopy
import folium
import pandas as pd
import re
from geopy.geocoders import Nominatim

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# 1. Clean up location data
def clean_location(location):
    # Remove special characters and extra spaces
    location = re.sub(r"[^\w\s,]", "", location)
    location = re.sub(r"\s+", " ", location).strip()
    return location

df['Cleaned Location'] = df['Location'].apply(clean_location)

# 2. Geocode addresses to get latitude and longitude
geolocator = Nominatim(user_agent="toronto_events_map")

def get_coordinates(location):
    try:
        # Attempt to geocode the location (replace 'Toronto, ON' with a more specific area if needed)
        location_data = geolocator.geocode(f"{location}, Toronto, ON")
        if location_data:
            return location_data.latitude, location_data.longitude
        else:
            return None, None  # Handle cases where geocoding fails
    except Exception as e:
        print(f"Error geocoding {location}: {e}")
        return None, None

df[['Latitude', 'Longitude']] = df['Cleaned Location'].apply(lambda x: pd.Series(get_coordinates(x)))

# 3. Handle online events
online_lat, online_lon = 43.60, -79.45  # A location in the water area near Toronto

df.loc[df['Cleaned Location'].str.contains('online', case=False), ['Latitude', 'Longitude']] = online_lat, online_lon

# 4. Group by location and sum attendees
grouped_df = df.groupby(['Latitude', 'Longitude'])['Attendees'].agg(['sum', 'count']).reset_index()

# 5. Create the map
toronto_map = folium.Map(location=[43.6532, -79.3832], zoom_start=12)

# 6. Add markers and circles
for index, row in grouped_df.iterrows():
    latitude, longitude = row['Latitude'], row['Longitude']
    total_attendees = row['sum']
    num_events = row['count']

    # Create marker with popup information
    popup_text = f"Total Attendees: {total_attendees}<br>Number of Events: {num_events}"
    folium.Marker(
        location=[latitude, longitude],
        popup=popup_text,
        tooltip=f"Location: {df.loc[(df['Latitude'] == latitude) & (df['Longitude'] == longitude), 'Cleaned Location'].iloc[0]}"
    ).add_to(toronto_map)

    # Add circle with radius based on attendees
    radius = total_attendees / 10  # Adjust this scaling factor as needed
    folium.Circle(
        location=[latitude, longitude],
        radius=radius,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.3,
        popup=popup_text
    ).add_to(toronto_map)

# Save and display the map
toronto_map.save('toronto_events_map_cleaned.html')
toronto_map
#######################################3

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Create a new column 'Event Type' based on 'Location'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics for online events
online_events = df[df['Event Type'] == 'Online']
total_online_events = len(online_events)
total_online_attendees = online_events['Attendees'].sum()
avg_online_attendees = total_online_attendees / total_online_events if total_online_events else 0

# Calculate metrics for in-person events
in_person_events = df[df['Event Type'] == 'In Person']
total_in_person_events = len(in_person_events)
total_in_person_attendees = in_person_events['Attendees'].sum()
avg_in_person_attendees = total_in_person_attendees / total_in_person_events if total_in_person_events else 0

# Create the first visual (online events)
plt.figure(figsize=(8, 6))
sns.barplot(x=['Total Events', 'Total Attendees', 'Avg. Attendees'],
            y=[total_online_events, total_online_attendees, avg_online_attendees],
            palette='Blues')
plt.title('Online Events Metrics', size=16)
plt.ylabel('Count / Average', size=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Create the second visual (in-person events)
plt.figure(figsize=(8, 6))
sns.barplot(x=['Total Events', 'Total Attendees', 'Avg. Attendees'],
            y=[total_in_person_events, total_in_person_attendees, avg_in_person_attendees],
            palette='Greens')
plt.title('In-Person Events Metrics', size=16)
plt.ylabel('Count / Average', size=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import pandas as pd

# Load the dataset
df = pd.read_csv('MeetUp_PopIn_Events.csv')

# Create a new column 'Event Type' based on 'Location'
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics for online events
online_events = df[df['Event Type'] == 'Online']
total_online_events = len(online_events)
total_online_attendees = online_events['Attendees'].sum()
avg_online_attendees = total_online_attendees / total_online_events if total_online_events else 0

# Calculate metrics for in-person events
in_person_events = df[df['Event Type'] == 'In Person']
total_in_person_events = len(in_person_events)
total_in_person_attendees = in_person_events['Attendees'].sum()
avg_in_person_attendees = total_in_person_attendees / total_in_person_events if total_in_person_events else 0

# Create a DataFrame for the results
data = {
    'Event Type': ['Online', 'In Person'],
    'Total Events': [total_online_events, total_in_person_events],
    'Total Attendees': [total_online_attendees, total_in_person_attendees],
    'Avg. Attendees per Event': [avg_online_attendees, avg_in_person_attendees]
}

results_df = pd.DataFrame(data)

# Display the results
print(results_df.to_string())  # Print as a formatted table

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset and prepare data (same as before)
df = pd.read_csv('MeetUp_PopIn_Events.csv')
df['Event Type'] = df['Location'].apply(lambda x: 'Online' if 'Online' in str(x) else 'In Person')

# Calculate metrics (same as before)
# ... (Code to calculate total_online_events, total_online_attendees, etc.)

# Create Pie Chart for Event Totals
plt.figure(figsize=(6, 6))
plt.pie([total_online_events, total_in_person_events],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Event Totals by Type', size=14)
plt.show()

# Create Pie Chart for Total Attendees
plt.figure(figsize=(6, 6))
plt.pie([total_online_attendees, total_in_person_attendees],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Total Attendees by Event Type', size=14)
plt.show()

# Create Pie Chart for Average Attendees per Event
plt.figure(figsize=(6, 6))
plt.pie([avg_online_attendees, avg_in_person_attendees],
        labels=['Online', 'In Person'],
        autopct='%1.1f%%',
        startangle=90,
        colors=['skyblue', 'lightcoral'])
plt.title('Average Attendees per Event Type', size=14)
plt.show()
